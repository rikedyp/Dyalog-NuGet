:Namespace NuGet

    project_dir←''
    project_name←''
    using_paths←0 2⍴''

    ∇ r←BinFolder;xml;target
      xml←⎕XML⊃⎕NGET project_dir,'/',project_name,'.csproj'
      target←⊃xml[xml[;2]⍳⊂'TargetFramework';3]
      r←({⊃(⎕NEXISTS ⍵)/⍵} (project_dir,'/bin')∘,¨'/Debug' '/Release'),'/',target
    ∇

    ∇ r←Add pkg;AP;add;name;version;prefix
      pkg←,⊆pkg
      (name version prefix)←3↑pkg,(≢pkg)↓'' '' ''
      add←name,(0≠≢version)/' --version ',version
      r←⎕CMD'dotnet add ',project_dir,' package ',add
      :If ~∨/'error:'⍷∊r
          r←using_paths←Publish
      :EndIf
    ∇

    ∇ using_paths←Publish
      ⎕CMD ⎕←CmdPaths'dotnet publish ',project_dir,' -o ',project_dir,'/nuget-packages'
      using_paths←UsingPaths
    ∇

    ∇ using_paths←UsingPaths;deps;d;k;v;t;pkg_name;pkgrt;dll;pkgs
      pkgs←Packages
      :If ⎕NEXISTS deps←project_dir,'/nuget-packages/',project_name,'.deps.json'
          (d k v t)←↓⍉⎕JSON ⎕OPT'Format' 'M'⊃⎕NGET deps
     ⍝ Depth, Key, Value, Type
          {}2{p[⍵]←⍺[⍺⍸⍵]}⌿⊢∘⊂⌸d⊣p←⍳≢d   ⍝ Parent vector p
     ⍝ Descendant of pkgs and key≡"runtime"
          pkg_name←⊃¨'/'(≠⊆⊢)¨k   ⍝ e.g. Clock/1.0.3 → Clock
          pkgrt←(k∊⊂'runtime')(∧⍤1){⍵∨⍵[p]}⍤1⍣≡pkg_name(∊⍤1 0),⊆pkgs
     ⍝ Child of "runtime" key is path to .dll
     ⍝    file name    key  parent is "runtime"
              ⍝ dll←⊃∘⌽¨'/'(≠⊆⊢)¨k⌿⍤1⍨(⊂p)⌷⍤1⊢pkgrt
          dll←∊¨1↓¨⎕NPARTS(∨⌿pkgrt[;p])/k
          using_paths←(project_dir,'/nuget-packages/')∘,¨dll
     
      :Else ⍝ No deps.json file
          ∘∘∘ ⍝ Framework? Now what?!
          using_paths←{(~(2⊃¨⎕NPARTS ⍵)∊⊂project_name)/⍵}(⊃⎕NINFO⍠1⊢project_dir,'/nuget-packages/*.dll')
      :EndIf
      using_paths←',',¨using_paths
    ∇

    ∇ r←Using pkgs;deps;idx
      pkgs←,⊆pkgs
      idx←using_paths[;1]⍳pkgs
      ⎕←have_using←idx≤≢using_paths
      ⎕←can_use←have_using⌿idx
     
      :If can_use≡⍥≢pkgs
          r←(⊣,',',⊢)/using_paths[can_use;]
      :Else
          add←pkgs~have_using⌿pkgs
     
     
          r←using_paths[can_use;]
          r⍪←new
      :EndIf
    ∇

    ∇ using_paths←Setup dir
      project_dir←dir
      project_name←(1-⌊/(⌽dir)⍳'\/')↑dir
      :If IsWin
          CmdPaths←('/'⎕R'\\')
      :Else
          CmdPaths←('\\'⎕R'/')
      :EndIf
      dotnet_version←GetDotNetVersion
      ⍝ Ask dotnet to create a .csproj file
      ⎕←↑⎕CMD CmdPaths'dotnet new classlib --target-framework-override ',dotnet_version,' -o ',dir
      using_paths←Publish
    ∇

    ∇ pkgs←Packages;xml
      xml←⎕XML⊃⎕NGET project_dir,'/',project_name,'.csproj'
      pkgs←{0=≢⍵:⍬ ⋄ (⊂⊂1 2)⊃¨⍵}xml[⍸xml[;2]∊⊂'PackageReference';4]
    ∇

    ∇ r←IsWin
      r←'Windows'(⊃⍷)⊃# ⎕WG'APLVersion'
    ∇

    ∇ dnv←GetDotNetVersion;ver
⍝ More detailed version in [DYALOG]/SALT/spice/Spice.dyalog (used in ]TOOLS.Version etc.)
⍝ 0/1/2: 0=nothing, 1=.NET Framework, 2=.NET Core / .NET 5+
⍝ TODO 0 case
      ⎕USING←'' 'System'
      :Trap 0
          ver←⍕System.Environment.Version
      :Else
          'No .NET available. Install a .NET SDK or check [NETCORE] environment variable.'⎕SIGNAL 11
      :EndTrap
     
      :If '4.0.30319.42000'≡ver
          dnv←⊃,/2↑'.'(≠⊆⊢)⊃⌽' '(≠⊆⊢)Runtime.InteropServices.RuntimeInformation.FrameworkDescription
      :ElseIf '4.0.30319.'≡10↑ver
          dnv←ver
      :Else
          dnv←⊃(⊣,'.',⊢)/⍕¨System.Environment.Version.(Major Minor)
      :EndIf
      dnv,⍨←'net'
    ∇

:EndNamespace
